<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertMetadataScript</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AlertMetadataScript</name>
        <script><![CDATA[var accessTokenScriptScript = new AlertGetAccessToken();
var AlertMetadataScript = Class.create();
AlertMetadataScript.prototype = {
    initialize: function() {
        this.jwt_token = "..";
        this.use_oauth = gs.getProperty('x_aleen_alertsnowp.use_oauth_authentication');
        gs.info("Metadata Is oauth enabled " + this.use_oauth);
        if (this.use_oauth === "false") {
            gs.info("Metadata Oauth Unavailable using jwt");
            this.jwt_token = accessTokenScriptScript.getToken();
        }
    },
    syncLocations: function() {
        gs.info('syncLocations  :: Begin');
        try {
            gs.info('syncLocations  :: BEFORE NULL CHECK' + this.jwt_token + ">>>>>>>>>" + this.use_oauth);
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetLocations', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                gs.info(" this.SSSSSSSSSSSSSSSSSSSSSSSSSSSS ----> " + this.use_oauth);
                if (this.use_oauth === "true") {
                    gs.info(" this.SSSSSSSSSSSSSSSSSSSSSSSSSSSS ----> " + this.jwt_token);
                    new OauthHelper().validateToken("GetLocations");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    gs.info(" this.jwt_token ----> " + this.jwt_token);
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        var locationImportSet = new GlideRecord('sys_import_set');
                        locationImportSet.initialize();
                        //locationImportSet.mode = "asynchronous";
                        //locationImportSet.state = "loading";
                        locationImportSet.table_name = "x_aleen_alertsnowp_u_locations_import_set";
                        locationImportSet.short_description = "Importing Data from x_aleen_alertsnowp_u_locations_import_set";
                        locationImportSet.insert();
                        for (i = 0; i < responseObj.data.length; i++) {
                            if (responseObj.data[i].type && responseObj.data[i].type != "" && (responseObj.data[i].type.indexOf("building") != -1 || responseObj.data[i].type.indexOf("lobby") != -1)) {
                                var locationImportSetRowGr = new GlideRecordSecure(locationImportSet.table_name);
                                locationImportSetRowGr.setValue('sys_import_set', locationImportSet.sys_id);
                                locationImportSetRowGr.setValue('u_state', (responseObj.data[i].stateProvince && responseObj.data[i].stateProvince != "") ? responseObj.data[i].stateProvince : "");
                                locationImportSetRowGr.setValue('u_country', (responseObj.data[i].countryId && responseObj.data[i].countryId != "") ? responseObj.data[i].countryId : "");
                                locationImportSetRowGr.setValue('u_postal_code', (responseObj.data[i].postalCode && responseObj.data[i].postalCode != "") ? responseObj.data[i].postalCode : "");
                                locationImportSetRowGr.setValue('u_city', (responseObj.data[i].city && responseObj.data[i].city != "") ? responseObj.data[i].city : "");
                                locationImportSetRowGr.setValue('u_latitude', (responseObj.data[i].latitude && responseObj.data[i].latitude != "") ? responseObj.data[i].latitude : "0.0");
                                locationImportSetRowGr.setValue('u_longitude', (responseObj.data[i].longitude && responseObj.data[i].longitude != "") ? responseObj.data[i].longitude : "0.0");
                                //locationImportSetRowGr.setValue('u_deleted', (responseObj.data[i].intStatus && responseObj.data[i].intStatus != "") ? responseObj.data[i].intStatus == 3 ? 'true' : 'false' : 'false');
                                locationImportSetRowGr.setValue('u_deleted', 'true');
                                locationImportSetRowGr.setValue('u_id', responseObj.data[i].id.toString());
                                locationImportSetRowGr.setValue('u_name', responseObj.data[i].text);
                                locationImportSetRowGr.setValue('u_location_type', responseObj.data[i].type);
                                locationImportSetRowGr.insert();
                            }
                        }
                        locationImportSet.state = "loaded";
                        locationImportSet.load_completed = new GlideDateTime();
                        locationImportSet.update();
                        var transformer = new GlideImportSetTransformer();
                        transformer.transformAllMaps(locationImportSet);
                        if (transformer.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("Completed Transformation");
                        }
                    }
                } else {
                    gs.info("Locations data sync is unsuccessful  due to API error & Response code =>" + updatehttpStatus);
                }
            } else {
                gs.info("Locations data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncLocations  error  :: ' + message);
        }
    },

    syncAccessLevels: function() {
        gs.info('syncAccessLevels  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GETAccessLevels', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                if ((this.use_oauth === "true")) {
                    new OauthHelper().validateToken("GETAccessLevels");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {

                        var accessImportSet = new GlideRecord('sys_import_set');
                        accessImportSet.initialize();
                        accessImportSet.table_name = "x_aleen_alertsnowp_u_acces_levels_import_set";
                        accessImportSet.short_description = "Importing Data from x_aleen_alertsnowp_u_acces_levels_import_set";
                        accessImportSet.insert();

                        var accessLocationImportSet = new GlideRecord('sys_import_set');
                        accessLocationImportSet.initialize();
                        accessLocationImportSet.table_name = "x_aleen_alertsnowp_u_access_locations_import_set";
                        accessLocationImportSet.short_description = "Importing Data from x_aleen_alertsnowp_u_access_locations_import_set";
                        accessLocationImportSet.insert();

                        var accessOwnerImportSet = new GlideRecord('sys_import_set');
                        accessOwnerImportSet.initialize();
                        accessOwnerImportSet.table_name = "x_aleen_alertsnowp_u_access_owners_import_set";
                        accessOwnerImportSet.short_description = "Importing Data from x_aleen_alertsnowp_u_access_owners_import_set";
                        accessOwnerImportSet.insert();

                        for (i = 0; i < responseObj.data.length; i++) {
                            var accessImportSetRowGr = new GlideRecordSecure(accessImportSet.table_name);
                            accessImportSetRowGr.setValue('sys_import_set', accessImportSet.sys_id); //???
                            accessImportSetRowGr.setValue('u_access_level_id', responseObj.data[i].id.toString());
                            accessImportSetRowGr.setValue('u_access_level_name', responseObj.data[i].text);
                            accessImportSetRowGr.setValue('u_system', responseObj.data[i].system.text);
                            accessImportSetRowGr.setValue('u_criticality', responseObj.data[i].criticality);
                            accessImportSetRowGr.setValue('u_deleted', (responseObj.data[i].intStatus && responseObj.data[i].intStatus != "") ? responseObj.data[i].intStatus == 3 ? 'true' : 'false' : 'false');
                            accessImportSetRowGr.setValue('u_sourceid', (responseObj.data[i].sourceId && responseObj.data[i].sourceId != "") ? responseObj.data[i].sourceId : "");
                            accessImportSetRowGr.insert();

                            if (responseObj.data[i].accessLocations && responseObj.data[i].accessLocations.length > 0) {

                                var accessLocations = responseObj.data[i].accessLocations;
                                for (j = 0; j < accessLocations.length; j++) {
                                    var importSetRowGr2 = new GlideRecordSecure(accessLocationImportSet.table_name);
                                    importSetRowGr2.setValue('sys_import_set', accessLocationImportSet.sys_id); //???
                                    importSetRowGr2.setValue('u_access_level_id', responseObj.data[i].id.toString());
                                    importSetRowGr2.setValue('u_access_level', responseObj.data[i].text);
                                    importSetRowGr2.setValue('u_access_level_name', responseObj.data[i].text);
                                    importSetRowGr2.setValue('u_access_location_id', accessLocations[j].locationId.toString());
                                    importSetRowGr2.setValue('u_location_name', accessLocations[j].location.text);
                                    importSetRowGr2.setValue('u_deleted', (accessLocations[j].intStatus && accessLocations[j].intStatus != "") ? accessLocations[j].intStatus == 3 ? 'true' : 'false' : 'false');
                                    importSetRowGr2.insert();
                                }
                            }
                            if (responseObj.data[i].accessOwners && responseObj.data[i].accessOwners.length > 0) {
                                var accessOwners = responseObj.data[i].accessOwners;
                                for (jk = 0; jk < accessOwners.length; jk++) {
                                    var importSetRowGr3 = new GlideRecordSecure(accessOwnerImportSet.table_name);
                                    importSetRowGr3.setValue('sys_import_set', accessOwnerImportSet.sys_id);
                                    importSetRowGr3.setValue('u_access_level_id', responseObj.data[i].id.toString()); //??
                                    importSetRowGr3.setValue('u_access_level_name', responseObj.data[i].text); //??
                                    importSetRowGr3.setValue('u_owner_type', accessOwners[jk].type);
                                    importSetRowGr3.setValue('u_owner', accessOwners[jk].identity.masterIdentityId);
                                    importSetRowGr3.setValue('u_deleted', (accessOwners[jk].intStatus && accessOwners[jk].intStatus != "") ? accessOwners[jk].intStatus == 3 ? 'true' : 'false' : 'false');
                                    importSetRowGr3.insert();
                                }
                            }
                        }
                        accessImportSet.state = "loaded";
                        accessImportSet.load_completed = new GlideDateTime();
                        accessImportSet.update();
                        var transformer = new GlideImportSetTransformer();
                        transformer.transformAllMaps(accessImportSet);
                        if (transformer.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("Completed Transformation1");
                        }

                        accessLocationImportSet.state = "loaded";
                        accessLocationImportSet.load_completed = new GlideDateTime();
                        accessLocationImportSet.update();
                        var transformer2 = new GlideImportSetTransformer();
                        transformer2.transformAllMaps(accessLocationImportSet);
                        if (transformer2.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("Completed Transformation2");
                        }

                        accessOwnerImportSet.state = "loaded";
                        accessOwnerImportSet.load_completed = new GlideDateTime();
                        accessOwnerImportSet.update();
                        var transformer3 = new GlideImportSetTransformer();
                        transformer3.transformAllMaps(accessOwnerImportSet);
                        if (transformer3.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("Completed Transformation3");
                        }
                    }
                } else {
                    gs.info("Access Levels data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Access Levels data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncAccessLevels   :: ' + message);
        }
    },
    syncBadgeTemplates: function() {
        gs.info('syncBadgeTemplates  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetBadgeTemplates', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                if ((this.use_oauth === "true")) {
                    new OauthHelper().validateToken("GetBadgeTemplates");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        var templateImportSet = new GlideRecord('sys_import_set');
                        templateImportSet.initialize();
                        templateImportSet.table_name = "x_aleen_alertsnowp_u_badge_templates_import_set";
                        templateImportSet.short_description = "Importing Data from x_aleen_alertsnowp_u_badge_templates_import_set";
                        templateImportSet.insert();
                        for (i = 0; i < responseObj.data.length; i++) {
                            var templateImportSetRowGr = new GlideRecordSecure(templateImportSet.table_name);
                            var template = responseObj.data[i];
                            templateImportSetRowGr.setValue('sys_import_set', templateImportSet.sys_id);
                            templateImportSetRowGr.setValue('u_id', template.id);
                            templateImportSetRowGr.setValue('u_extid', template.extId);
                            templateImportSetRowGr.setValue('u_text', template.text);
                            templateImportSetRowGr.setValue('u_description', template.description);
                            templateImportSetRowGr.setValue('u_frontside_badge_html', template.frontSideBadgeHTML);
                            templateImportSetRowGr.setValue('u_backside_badge_html', template.backSideBadgeHTML);
                            templateImportSetRowGr.insert();
                        }
                        templateImportSet.state = "loaded";
                        templateImportSet.load_completed = new GlideDateTime();
                        templateImportSet.update();
                        var transformer = new GlideImportSetTransformer();
                        transformer.transformAllMaps(templateImportSet);
                        if (transformer.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("BadgeTemplates(" + responseObj.data.length + ")  sync is successful");
                        }
                    }
                } else {
                    gs.info("BadgeTemplates data sync is unsuccessful  due to API error  :: syncBadgeTemplates ");
                }
            } else {
                gs.info("BadgeTemplates data sync is unsuccessful due to API  server authentication / connectivity issue  :: syncBadgeTemplates");
            }
            gs.info('syncBadgeTemplates  :: End');
        } catch (ex) {
            var message = ex.message;
            gs.info('syncTemplates   :: ' + message);
        }
    },

    type: 'AlertMetadataScript'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-19 07:27:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_id>
        <sys_mod_count>69</sys_mod_count>
        <sys_name>AlertMetadataScript</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-22 06:41:38</sys_updated_on>
    </sys_script_include>
</record_update>
