<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertMetadataScript</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AlertMetadataScript</name>
        <script><![CDATA[var accessTokenScriptScript = new AlertGetAccessToken();
var AlertMetadataScript = Class.create();
AlertMetadataScript.prototype = {
    initialize: function() {
        this.jwt_token = accessTokenScriptScript.getToken();
    },
    syncLocations: function() {
        gs.info('syncLocations  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetLocations', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_locations");
                    gr.query();
                    gr.deleteMultiple();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            if (responseObj.data[i].type && responseObj.data[i].type != "" && ( responseObj.data[i].type.indexOf("building") != -1 || responseObj.data[i].type.indexOf("lobby") != -1  )) {
                                var state = (responseObj.data[i].stateProvince && responseObj.data[i].stateProvince != "") ? responseObj.data[i].stateProvince : "";
                                var country = (responseObj.data[i].countryId && responseObj.data[i].countryId != "") ? responseObj.data[i].countryId : "";
                                var postal = (responseObj.data[i].postalCode && responseObj.data[i].postalCode != "") ? responseObj.data[i].postalCode : "";
                                var city = (responseObj.data[i].city && responseObj.data[i].city != "") ? responseObj.data[i].city : "";
                                var latitude = (responseObj.data[i].latitude && responseObj.data[i].latitude != "") ? responseObj.data[i].latitude : "0.0";
                                var longitude = (responseObj.data[i].longitude && responseObj.data[i].longitude != "") ? responseObj.data[i].longitude : "0.0";
                                this.saveLocation(responseObj.data[i].id.toString(), responseObj.data[i].text, responseObj.data[i].type, state, country, postal, city, latitude, longitude);
                            }
                        }
                        gs.info("Locations (" + responseObj.data.length + ") data sync is successful");
                    }
                } else {
                    gs.info("Locations data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Locations data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncLocations  error  :: ' + message);
        }
    },
    saveLocation: function(id, name, location_type, state, country, postal, city, latitude, longitude) {
        var count = 0;
        var gr = new GlideAggregate('x_aleen_alertsnowp_locations');
        gr.addQuery('id', id);
        gr.addAggregate('COUNT');
        gr.query();
        while (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        if (count == 0) {
            var location = new GlideRecordSecure('x_aleen_alertsnowp_locations');
            location.id = id;
            location.name = name;
            location.location_type = location_type;
            location.state = state;
            location.country = country;
            location.postal_code = postal;
            location.city = city;
            location.latitude = latitude;
            location.longitude = longitude;
            location.sys_created_on = new GlideDateTime();
            location.sys_updated_on = new GlideDateTime();
            location.insert();
        }
    },
    syncAccessLevels: function() {
        gs.info('syncAccessLevels  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GETAccessLevels', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_access_levels");
                    gr.query();
                    gr.deleteMultiple();
                    var grAL = new GlideRecordSecure("x_aleen_alertsnowp_accesslocations");
                    grAL.query();
                    grAL.deleteMultiple();
                    var grAO = new GlideRecordSecure("x_aleen_alertsnowp_area_owners");
                    grAO.query();
                    grAO.deleteMultiple();
                    var grAR = new GlideRecordSecure("x_aleen_alertsnowp_accessasset");
                    grAR.query();
                    grAR.deleteMultiple();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        gs.info(" Total access levels to sync  ==> " + responseObj.data.length);
                        for (i = 0; i < responseObj.data.length; i++) {
                            var accessLevelObj = responseObj.data[i];
                            var accessId = accessLevelObj.id.toString();
                            var accessName = accessLevelObj.text;
                            var systemId = accessLevelObj.system.text;
                            var sourceId = "";
                            if (accessLevelObj.sourceId) {
                                sourceId = accessLevelObj.sourceId;
                            }
                            this.saveAccessLevel(accessId, accessName, systemId, accessLevelObj.criticality, sourceId);
                            if (accessLevelObj.accessLocations && accessLevelObj.accessLocations.length > 0) {
                                var accessLocations = accessLevelObj.accessLocations;
                                for (j = 0; j < accessLocations.length; j++) {
                                    var accessLocation = accessLocations[j];
                                    this.saveAccessLevelLocation(accessId, accessName, accessLocation.locationId.toString());
                                }

                                if (accessLevelObj.accessOwners && accessLevelObj.accessOwners.length > 0) {
                                    var accessOwners = accessLevelObj.accessOwners;
                                    for (jk = 0; jk < accessOwners.length; jk++) {
                                        var accessOwner = accessOwners[jk];
                                        this.saveAccessLevelOwner(accessId, accessName, accessOwner.type, accessOwner.identity.masterIdentityId);
                                    }
                                }
                                if (accessLevelObj.accessAssets && accessLevelObj.accessAssets.length > 0) {
                                    var accessAssets = accessLevelObj.accessAssets;
                                    for (kl = 0; kl < accessAssets.length; kl++) {
                                        var accessAsset = accessAssets[kl];
                                        this.saveAccessLevelReader(accessId, accessName, accessAsset.asset.text, accessAsset.asset.id);
                                    }
                                }
                            } else {
                                gs.info("Access level " + accessName + "  has no location so not saving");
                            }
                        }
                    }
                } else {
                    gs.info("Access Levels data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Access Levels data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncAccessLevels   :: ' + message);
        }
    },
    saveAccessLevel: function(id, name, system, criticality, sourceId) {
        var count = 0;
        var gr = new GlideAggregate('x_aleen_alertsnowp_access_levels');
        gr.addQuery('access_level_id', id);
        gr.addAggregate('COUNT');
        gr.query();
        while (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        if (count == 0) {
            var accessLevel = new GlideRecordSecure('x_aleen_alertsnowp_access_levels');
            accessLevel.access_level_id = id;
            accessLevel.access_level_name = name;
            accessLevel.sourceid = sourceId;
            accessLevel.system = system;
            accessLevel.criticality = criticality;
            accessLevel.sys_created_on = new GlideDateTime();
            accessLevel.sys_updated_on = new GlideDateTime();
            accessLevel.insert();
        }
    },
    saveAccessLevelOwner: function(id, accName, ownertype, masterUserId) {
        try {
            var grUser = new GlideRecordSecure('sys_user');
            if (grUser.get('user_name', masterUserId)) {
                var count = 0;
                var gr = new GlideAggregate('x_aleen_alertsnowp_area_owners');
                gr.addQuery('access_level_id', id);
                gr.addQuery('owner', grUser.sys_id);
                gr.addAggregate('COUNT');
                gr.query();
                while (gr.next()) {
                    count = gr.getAggregate('COUNT');
                }
                if (count == 0) {
                    var accessLevelAreaOwner = new GlideRecordSecure('x_aleen_alertsnowp_area_owners');
                    accessLevelAreaOwner.access_level_id = id;
                    accessLevelAreaOwner.access_level_name = accName;
                    accessLevelAreaOwner.owner = grUser.sys_id;
                    accessLevelAreaOwner.owner_type = ownertype;
                    accessLevelAreaOwner.sys_created_on = new GlideDateTime();
                    accessLevelAreaOwner.sys_updated_on = new GlideDateTime();
                    accessLevelAreaOwner.insert();
                }
            }
        } catch (ex) {
            gs.info('saveAccessLevelOwners Error   :: ' + ex.message);
        }
    },
    saveAccessLevelLocation: function(id, name, location_id) {
        try {
            var grLocation = new GlideRecordSecure('x_aleen_alertsnowp_locations');
            if (grLocation.get('id', location_id)) {
                var grAccessLevelRecord = new GlideRecordSecure('x_aleen_alertsnowp_access_levels');
                if (grAccessLevelRecord.get('access_level_id', id)) {
                    var count = 0;
                    var gr = new GlideAggregate('x_aleen_alertsnowp_accesslocations');
                    gr.addQuery('access_level', grAccessLevelRecord.sys_id);
                    gr.addQuery('location', grLocation.sys_id);
                    gr.addAggregate('COUNT');
                    gr.query();
                    while (gr.next()) {
                        count = gr.getAggregate('COUNT');
                    }
                    if (count == 0) {
                        var accessLevelLocation = new GlideRecordSecure('x_aleen_alertsnowp_accesslocations');
                        accessLevelLocation.access_level_id = id;
                        accessLevelLocation.access_level_name = name;
                        accessLevelLocation.access_level = grAccessLevelRecord.sys_id;
                        accessLevelLocation.location = grLocation.sys_id;
                        accessLevelLocation.location_name = grLocation.name;
                        accessLevelLocation.sys_created_on = new GlideDateTime();
                        accessLevelLocation.sys_updated_on = new GlideDateTime();
                        accessLevelLocation.insert();
                    }
                }
            }
        } catch (ex) {
            gs.info('saveAccessLevelLocations Error   :: ' + ex.message);
        }
    },
    saveAccessLevelReader: function(id, accName, assetName, assetId) {
        try {
            var grReader = new GlideRecordSecure('x_aleen_alertsnowp_readers');
            if (grReader.get('id', assetId)) {
                var count = 0;
                var grAsset = new GlideAggregate('x_aleen_alertsnowp_accessasset');
                grAsset.addQuery('access_level_id', id);
                grAsset.addQuery('reader', grReader.sys_id);
                grAsset.addAggregate('COUNT');
                grAsset.query();
                while (grAsset.next()) {
                    count = grAsset.getAggregate('COUNT');
                }
                if (count == 0) {
                    var accessLevelAsset = new GlideRecordSecure('x_aleen_alertsnowp_accessasset');
                    accessLevelAsset.access_level_id = id;
                    accessLevelAsset.access_level_name = accName;
                    accessLevelAsset.reader = grReader.sys_id;
                    accessLevelAsset.reader_name = assetName;
                    accessLevelAsset.sys_created_on = new GlideDateTime();
                    accessLevelAsset.sys_updated_on = new GlideDateTime();
                    accessLevelAsset.insert();
                }
            }
        } catch (ex) {
            gs.info('saveAccessLevelReaders   :: ' + ex.message);
        }
    },
    syncBadgeTemplates: function() {
        gs.info('syncBadgeTemplates  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetBadgeTemplates', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_badgetemplates");
                    gr.query();
                    gr.deleteMultiple();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            var template = responseObj.data[i];
                            this.saveTemplate(template);
                        }
                        gs.info("BadgeTemplates(" + responseObj.data.length + ")  sync is successful");
                    }
                } else {
                    gs.info("BadgeTemplates data sync is unsuccessful  due to API error  :: syncBadgeTemplates ");
                }
            } else {
                gs.info("BadgeTemplates data sync is unsuccessful due to API  server authentication / connectivity issue  :: syncBadgeTemplates");
            }
            gs.info('syncBadgeTemplates  :: End');
        } catch (ex) {
            var message = ex.message;
            gs.info('syncTemplates   :: ' + message);
        }
    },
    saveTemplate: function(template) {
        var count = 0;
        var gr = new GlideAggregate('x_aleen_alertsnowp_badgetemplates');
        gr.addQuery('id', template.id);
        gr.addAggregate('COUNT');
        gr.query();
        while (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        if (count == 0) {
            var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_badgetemplates');
            recordToInsert.id = template.id;
            recordToInsert.extid = template.extId;
            recordToInsert.text = template.text;
            recordToInsert.description = template.description;
            recordToInsert.frontsidebadgehtml = template.frontSideBadgeHTML;
            recordToInsert.backsidebadgehtml = template.backSideBadgeHTML;
            recordToInsert.sys_created_on = new GlideDateTime();
            recordToInsert.sys_updated_on = new GlideDateTime();
            recordToInsert.insert();
        }
    },
    syncReaders: function() {
        gs.info('syncReaders  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetReaders', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_readers");
                    gr.query();
                    gr.deleteMultiple();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            var template = responseObj.data[i];
                            this.saveReader(template);
                        }
						gs.info(" Readers ("+responseObj.data.length+") sync is successful >>>>>>>>>>");
                    }
                } else {
                    gs.info("Readers data sync is unsuccessful  due to API error ");
                }
            } else {
                gs.info("Readers data sync is unsuccessful due to API  server authentication / connectivity issue ");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncReaders   Error   :: ' + message);
        }
    },
	saveReader: function(template) {
        try {
            var count = 0;
            var gr = new GlideAggregate('x_aleen_alertsnowp_readers');
            gr.addQuery('id', template.id);
            gr.addAggregate('COUNT');
            gr.query();
            while (gr.next()) {
                count = gr.getAggregate('COUNT');
            }
            if (count == 0) {
                var grLocation = new GlideRecordSecure('x_aleen_alertsnowp_locations');
                if (grLocation.get('id', template.locationId.toString())) {
                    var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_readers');
                    recordToInsert.id = template.id;
                    recordToInsert.extid = template.extId;
                    recordToInsert.text = template.text;
                    recordToInsert.type = template.type;
                    recordToInsert.intstatus = template.intStatus;
                    recordToInsert.subtype = template.subType;
                    recordToInsert.serialno = template.serialNo;
                    recordToInsert.assetstatus = template.assetStatus;
                    recordToInsert.location = grLocation.sys_id;
                    recordToInsert.sys_created_on = new GlideDateTime();
                    recordToInsert.sys_updated_on = new GlideDateTime();
                    recordToInsert.insert();
                }
            }
        } catch (ex) {
            var message = ex.message;
			gs.info('save Reader   Error   :: ' + message);
        }
    },
    type: 'AlertMetadataScript'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-19 07:27:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>AlertMetadataScript</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-21 14:27:59</sys_updated_on>
    </sys_script_include>
</record_update>
