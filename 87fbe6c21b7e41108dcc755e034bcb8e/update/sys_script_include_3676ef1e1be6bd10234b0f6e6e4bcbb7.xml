<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertMetadataScript</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AlertMetadataScript</name>
        <script><![CDATA[var accessTokenScriptScript = new AlertGetAccessToken();
var AlertMetadataScript = Class.create();
AlertMetadataScript.prototype = {
    initialize: function() {
        this.jwt_token = accessTokenScriptScript.getToken();
    },
    syncLocations: function() {
        gs.info('syncLocations  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetLocations', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        var impSet = new GlideRecord('sys_import_set');
                        impSet.initialize();
                        //impSet.mode = "asynchronous";
                        //impSet.state = "loading";
                        impSet.table_name = "x_aleen_alertsnowp_u_locations_import_set";
                        impSet.short_description = "Importing Data from x_aleen_alertsnowp_u_locations_import_set";
                        impSet.insert();
                        for (i = 0; i < responseObj.data.length; i++) {
                            if (responseObj.data[i].type && responseObj.data[i].type != "" && (responseObj.data[i].type.indexOf("building") != -1 || responseObj.data[i].type.indexOf("lobby") != -1)) {
                                var importSetRowGr = new GlideRecordSecure(impSet.table_name);
                                importSetRowGr.setValue('sys_import_set', impSet.sys_id);
                                importSetRowGr.setValue('u_state', (responseObj.data[i].stateProvince && responseObj.data[i].stateProvince != "") ? responseObj.data[i].stateProvince : "");
                                importSetRowGr.setValue('u_country', (responseObj.data[i].countryId && responseObj.data[i].countryId != "") ? responseObj.data[i].countryId : "");
                                importSetRowGr.setValue('u_postal_code', (responseObj.data[i].postalCode && responseObj.data[i].postalCode != "") ? responseObj.data[i].postalCode : "");
                                importSetRowGr.setValue('u_city', (responseObj.data[i].city && responseObj.data[i].city != "") ? responseObj.data[i].city : "");
                                importSetRowGr.setValue('u_latitude', (responseObj.data[i].latitude && responseObj.data[i].latitude != "") ? responseObj.data[i].latitude : "0.0");
                                importSetRowGr.setValue('u_longitude', (responseObj.data[i].longitude && responseObj.data[i].longitude != "") ? responseObj.data[i].longitude : "0.0");
                                importSetRowGr.setValue('u_deleted', (responseObj.data[i].intStatus && responseObj.data[i].intStatus != "") ? responseObj.data[i].intStatus == 3 ? true : false : false);
                                importSetRowGr.setValue('u_id', responseObj.data[i].id.toString());
                                importSetRowGr.setValue('u_name', responseObj.data[i].text);
                                importSetRowGr.setValue('u_location_type', responseObj.data[i].type);
                                importSetRowGr.insert();
                            }
                        }
                        impSet.state = "loaded";
                        impSet.load_completed = new GlideDateTime();
                        impSet.update();
                        var transformer = new GlideImportSetTransformer();
                        transformer.transformAllMaps(impSet);
                        if (transformer.isError()) {
                            gs.info('Error executing the transform');
                        } else {
                            gs.info("Completed Transformation");
                        }
                    }
                } else {
                    gs.info("Locations data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Locations data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncLocations  error  :: ' + message);
        }
    },

    syncAccessLevels: function() {
        gs.info('syncAccessLevels  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GETAccessLevels', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        gs.info(" Total access levels to sync  ==> " + responseObj.data.length);
                        for (i = 0; i < responseObj.data.length; i++) {
                            var accessLevelObj = responseObj.data[i];
                            var accessId = accessLevelObj.id.toString();
                            var accessName = accessLevelObj.text;
                            var systemId = accessLevelObj.system.text;
                            var deleted = accessLevelObj.intStatus == 3 ? true : false;
                            var sourceId = "";
                            if (accessLevelObj.sourceId) {
                                sourceId = accessLevelObj.sourceId;
                            }
                            this.saveAccessLevel(accessId, accessName, systemId, accessLevelObj.criticality, sourceId, deleted);

                            if (accessLevelObj.accessLocations && accessLevelObj.accessLocations.length > 0) {
                                var accessLocations = accessLevelObj.accessLocations;
                                for (j = 0; j < accessLocations.length; j++) {
                                    var accessLocation = accessLocations[j];
                                    var accessLocationsDeleted = accessLocations[j].intStatus == 3 ? true : false;
                                    this.saveAccessLevelLocation(accessId, accessName, accessLocation.locationId.toString(), accessLocationsDeleted);
                                }

                                if (accessLevelObj.accessOwners && accessLevelObj.accessOwners.length > 0) {
                                    var accessOwners = accessLevelObj.accessOwners;
                                    for (jk = 0; jk < accessOwners.length; jk++) {
                                        var accessOwner = accessOwners[jk];
                                        var accessOwnerDeleted = accessOwners[jk].intStatus == 3 ? true : false;
                                        this.saveAccessLevelOwner(accessId, accessName, accessOwner.type, accessOwner.identity.masterIdentityId, accessOwnerDeleted);
                                    }
                                }
                            } else {
                                gs.info("Access level " + accessName + "  has no location so not saving");
                            }
                        }
                    }
                } else {
                    gs.info("Access Levels data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Access Levels data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncAccessLevels   :: ' + message);
        }
    },
    saveAccessLevel: function(id, name, system, criticality, sourceId, deleted) {
        var count = 0;
        var gr = new GlideAggregate('x_aleen_alertsnowp_access_levels');
        gr.addQuery('access_level_id', id);
        gr.addAggregate('COUNT');
        gr.query();
        while (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        gs.info('count   :: ' + count);
        if (count == 0) {
            var accessLevel = new GlideRecordSecure('x_aleen_alertsnowp_access_levels');
            accessLevel.access_level_id = id;
            accessLevel.access_level_name = name;
            accessLevel.sourceid = sourceId;
            accessLevel.system = system;
            accessLevel.criticality = criticality;
            accessLevel.sys_created_on = new GlideDateTime();
            accessLevel.sys_updated_on = new GlideDateTime();
            accessLevel.insert();
        } else {
            var update = new GlideAggregate('x_aleen_alertsnowp_access_levels');
            update.addQuery('access_level_id', id);
            update.query();
            while (update.next()) {
                if (deleted) {
                    update.deleteRecord();
                } else {
                    update.access_level_name = name;
                    update.sourceid = sourceId;
                    update.system = system;
                    update.criticality = criticality;
                    update.sys_updated_on = new GlideDateTime();
                    update.update();
                }
            }
        }
    },
    saveAccessLevelOwner: function(id, accName, ownertype, masterUserId, deleted) {
        try {
            var grUser = new GlideRecordSecure('sys_user');
            if (grUser.get('user_name', masterUserId)) {
                var count = 0;
                var gr = new GlideAggregate('x_aleen_alertsnowp_area_owners');
                gr.addQuery('access_level_id', id);
                gr.addQuery('owner', grUser.sys_id);
                gr.addAggregate('COUNT');
                gr.query();
                while (gr.next()) {
                    count = gr.getAggregate('COUNT');
                }
                if (count == 0) {
                    var accessLevelAreaOwner = new GlideRecordSecure('x_aleen_alertsnowp_area_owners');
                    accessLevelAreaOwner.access_level_id = id;
                    accessLevelAreaOwner.access_level_name = accName;
                    accessLevelAreaOwner.owner = grUser.sys_id;
                    accessLevelAreaOwner.owner_type = ownertype;
                    accessLevelAreaOwner.sys_created_on = new GlideDateTime();
                    accessLevelAreaOwner.sys_updated_on = new GlideDateTime();
                    accessLevelAreaOwner.insert();
                } else {
                    var update = new GlideAggregate('x_aleen_alertsnowp_area_owners');
                    update.addQuery('access_level_id', id);
                    update.addQuery('owner', grUser.sys_id);
                    update.query();
                    while (update.next()) {
                        if (deleted) {
                            update.deleteRecord();
                        } else {
                            update.access_level_name = accName;
                            update.owner = grUser.sys_id;
                            update.owner_type = ownertype;
                            update.sys_updated_on = new GlideDateTime();
                            update.update();
                        }
                    }
                }
            }
        } catch (ex) {
            gs.info('saveAccessLevelOwners Error   :: ' + ex.message);
        }
    },
    saveAccessLevelLocation: function(id, name, location_id, deleted) {
        try {
            var grLocation = new GlideRecordSecure('x_aleen_alertsnowp_locations');
            if (grLocation.get('id', location_id)) {
                var grAccessLevelRecord = new GlideRecordSecure('x_aleen_alertsnowp_access_levels');
                if (grAccessLevelRecord.get('access_level_id', id)) {
                    var count = 0;
                    var gr = new GlideAggregate('x_aleen_alertsnowp_accesslocations');
                    gr.addQuery('access_level', grAccessLevelRecord.sys_id);
                    gr.addQuery('location', grLocation.sys_id);
                    gr.addAggregate('COUNT');
                    gr.query();
                    while (gr.next()) {
                        count = gr.getAggregate('COUNT');
                    }
                    if (count == 0) {
                        var accessLevelLocation = new GlideRecordSecure('x_aleen_alertsnowp_accesslocations');
                        accessLevelLocation.access_level_id = id;
                        accessLevelLocation.access_level_name = name;
                        accessLevelLocation.access_level = grAccessLevelRecord.sys_id;
                        accessLevelLocation.location = grLocation.sys_id;
                        accessLevelLocation.location_name = grLocation.name;
                        accessLevelLocation.sys_created_on = new GlideDateTime();
                        accessLevelLocation.sys_updated_on = new GlideDateTime();
                        accessLevelLocation.insert();
                    } else {
                        var update = new GlideAggregate('x_aleen_alertsnowp_accesslocations');
                        update.addQuery('access_level', grAccessLevelRecord.sys_id);
                        update.addQuery('location', grLocation.sys_id);
                        update.query();
                        while (update.next()) {
                            if (deleted) {
                                update.deleteRecord();
                            } else {
                                update.access_level_name = name;
                                update.access_level = grAccessLevelRecord.sys_id;
                                update.location = grLocation.sys_id;
                                update.location_name = grLocation.name;
                                update.sys_updated_on = new GlideDateTime();
                                update.update();
                            }
                        }
                    }
                }
            }
        } catch (ex) {
            gs.info('saveAccessLevelLocations Error   :: ' + ex.message);
        }
    },

    syncBadgeTemplates: function() {
        gs.info('syncBadgeTemplates  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetBadgeTemplates', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_badgetemplates");
                    gr.query();
                    // gr.deleteMultiple();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            var template = responseObj.data[i];
                            this.saveTemplate(template);
                        }
                        gs.info("BadgeTemplates(" + responseObj.data.length + ")  sync is successful");
                    }
                } else {
                    gs.info("BadgeTemplates data sync is unsuccessful  due to API error  :: syncBadgeTemplates ");
                }
            } else {
                gs.info("BadgeTemplates data sync is unsuccessful due to API  server authentication / connectivity issue  :: syncBadgeTemplates");
            }
            gs.info('syncBadgeTemplates  :: End');
        } catch (ex) {
            var message = ex.message;
            gs.info('syncTemplates   :: ' + message);
        }
    },
    saveTemplate: function(template) {
        var count = 0;
        var gr = new GlideAggregate('x_aleen_alertsnowp_badgetemplates');
        gr.addQuery('id', template.id);
        gr.addAggregate('COUNT');
        gr.query();
        while (gr.next()) {
            count = gr.getAggregate('COUNT');
        }
        if (count == 0) {
            var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_badgetemplates');
            recordToInsert.id = template.id;
            recordToInsert.extid = template.extId;
            recordToInsert.text = template.text;
            recordToInsert.description = template.description;
            recordToInsert.frontsidebadgehtml = template.frontSideBadgeHTML;
            recordToInsert.backsidebadgehtml = template.backSideBadgeHTML;
            recordToInsert.sys_created_on = new GlideDateTime();
            recordToInsert.sys_updated_on = new GlideDateTime();
            recordToInsert.insert();
        } else {
            var update = new GlideAggregate('x_aleen_alertsnowp_badgetemplates');
            update.addQuery('id', template.id);
            update.query();
            var deleted = template.intStatus == 3 ? true : false;
            while (update.next()) {
                if (deleted) {
                    update.deleteRecord();
                } else {
                    update.extid = template.extId;
                    update.text = template.text;
                    update.description = template.description;
                    update.frontsidebadgehtml = template.frontSideBadgeHTML;
                    update.backsidebadgehtml = template.backSideBadgeHTML;
                    update.sys_updated_on = new GlideDateTime();
                    update.update();
                }
            }
        }
    },
    type: 'AlertMetadataScript'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-19 07:27:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>AlertMetadataScript</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_3676ef1e1be6bd10234b0f6e6e4bcbb7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-19 10:16:34</sys_updated_on>
    </sys_script_include>
</record_update>
