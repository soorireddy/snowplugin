<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertEnterprisePlatformAPIs</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Used to call from Workflow</description>
        <name>AlertEnterprisePlatformAPIs</name>
        <script><![CDATA[var AlertEnterprisePlatformAPIs = Class.create();
AlertEnterprisePlatformAPIs.prototype = {
    initialize: function() {
        this.baseURLProp = gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl');
        this.jwt_token = this.getJWT();
    },
    getJWT: function() {
        try {
            var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetJWTToken', 'POST');
            r.setStringParameter('baseURL', this.baseURLProp);
            r.setRequestHeader('Content-Type', 'application/json');
            var requestBody1 =
                '{ "username":"' + gs.getProperty('x_aleen_alertsnowp.alert_api_username') +
                '", "password":"' + gs.getProperty('x_aleen_alertsnowp.alert_api_password') + '"}';
            var requestBody = requestBody1.toString();
            //gs.info('JWT request body ::  ==> ' + requestBody);
            r.setRequestBody(requestBody);
            var response = r.executeAsync();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            var Token = null;
            if (httpStatus == 200) {
                var responseObj = JSON.parse(responseBody);
                if (null != responseObj && responseObj.success && null != responseObj.data) {
                    Token = 'Bearer ' + responseObj.data.access_token;
                    // gs.info('Authentication is Successful');
                }
            } else {
                // gs.info('Authentication is unSuccessful');
            }
            return Token;
        } catch (ex) {
            var message = ex.message;
            gs.debug('getJWT   :: ' + message);
        }
    },
    newBadge: function(data) {
        gs.info(" newBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var newBadgeRequestBody1 =
                    '{"type": "RequestNewBadge","requestIdentityFieldNew": [{ "identityId":' + identitySystemId + '}],"customProperties": { "comment":"' + data.delivery_comments + '","reason": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('newBadge request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('New Badge request has been placed with Alert ,it will take sometime to Process, it will update the status based on Alert response');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("New Badge Request is created Successfully");
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("New Badge Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  creation is failed in Alert " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.debug("New Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('newBadge   :: ' + message);
            this.saveAuditLog(data.number, gs.getUserName(), "error occured while approving request ::" + message, "", "");
        }
    },
    activateBadge: function(data) {
        gs.info(" activateBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var userName = '';
                if (grUser.get(data.request_for)) {
                    userName = grUser.user_name;
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UpdateProfile', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{"identity": {"masterIdentityId": "' + userName + '"},"identityAsset": [{"assetAccessId": "' + data.badge_number + '","action":"UNLOCK"}]}';
                var requestBody = requestBody1.toString();
                gs.info('activateBadge JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200) {
                    gs.addInfoMessage('Request processed Successfully');
                    gs.info("Badge activated Successfully");
                    data.state = 3;
                    this.saveAuditLog(data.number, userName, "activateBadge  is successful", "", "");
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Badge activation isunsuccessful");
                    this.saveAuditLog(data.number, userName, "activateBadge is unsuccessful reason ->" + updateResponseObj.data.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Activate Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('activateBadge   :: ' + message);
        }
    },
    registerVisitor: function(data) {
        gs.info(" registerVisitor  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.addInfoMessage('Request processed Successfully');
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Register a Visitor Request is unsuccessful due to API  server authentication / connectivity issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('registerVisitor   :: ' + message);
        }
    },
    buildingAccess: function(data) {
        gs.info(" buildingAccess  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.addInfoMessage('Building Access request has been placed with Alert ,it will take sometime to Process, it will update the status based on Alert response');
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Building Access  Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('buildingAccess   :: ' + message);
        }
    },
    mobileCredentials: function(data) {
        gs.info(" mobileCredentials  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var newBadgeRequestBody1 =
                    '{"type": "RequestNewMobileCredetials","requestIdentityFieldNew": [{"identityId": ' + identitySystemId + ',"customProperties": {"phoneNumber": "' + data.phone_number + '"}}],"customProperties": {"comment": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('mobileCredentials request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Mobile Credentials request has been placed with Alert ,it will take sometime to Process, it will update the status based on Alert response');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Mobile Credentials request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("Mobile Credentials Request is created Successfully");
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Mobile Credentials Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Mobile Credentials request  creation is failed in Alert  " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.debug("Mobile Credentials Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('mobileCredentials   :: ' + message);
        }
    },
    replaceBadge: function(data) {
        gs.info(" replaceBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var newBadgeRequestBody1 =
                    '{"type": "externalReplaceBadge","requestIdentityFieldNew": [{ "identityId":' + identitySystemId + '}],"customProperties": { "comment":"' + data.badge_delivery_comments + '","reason": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('replace Badge request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Replace Badge request has been placed with Alert ,it will take sometime to Process, it will update the status based on Alert response');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("Replace Badge Request is created Successfully");
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Replace Badge Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Replace Badge request  creation is failed in Alert  " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.debug("Replace Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
                /*
				var grreplaceBadge = new GlideRecordSecure('x_aleen_alertsnowp_repalce_badge');
				if (grreplaceBadge.get('number', data.number)) {
					gs.info(' found ');
                    grreplaceBadge.state = 4;
					grreplaceBadge.update();
                }else{
					gs.info('not found ');
				} */

            }
        } catch (ex) {
            var message = ex.message;
            gs.info('replaceBadge   :: ' + message);
        }
    },
    resetPin: function(data) {
        gs.info(" resetPin  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identityId = '';
                if (grUser.get(data.request_for)) {
                    identityId = grUser.user_name;
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UpdateProfile', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{ "identity":{ "masterIdentityId":"' + identityId + '","pin":' + data.new_pin + '}}';
                var requestBody = requestBody1.toString();
                gs.info('reset pin JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    gs.addInfoMessage('Request processed Successfully');
                    this.saveAuditLog(data.number, identityId, "Reset PIN  is successful", "", "");
                    data.state = 3;
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    this.saveAuditLog(data.number, identityId, "Reset PIN  is unsuccessful", "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.debug("Reset PIN Request is unsuccessful due to API  server authentication / connectivity issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('resetPin   :: ' + message);
        }
    },
    updateProfile: function(data) {
        gs.info(" updateProfile  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var userName = '';
                if (grUser.get(data.request_for)) {
                    userName = grUser.user_name;
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UpdateProfile', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{ "identity":{ "email":"' + data.email + '", "masterIdentityId":"' + userName + '","phone":' + data.phone_number + '}}';
                var requestBody = requestBody1.toString();
                gs.debug('updateProfile JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    gs.addInfoMessage('Request processed Successfully');
                    gs.debug("Updated Successfully");
                    data.state = 3;
                    this.saveAuditLog(data.number, userName, "profile update is successful", "", "");
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.debug("Update is unsuccessful");
                    this.saveAuditLog(data.number, userName, "profile update is unsuccessful", "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.debug("Update profile Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            gs.info('updateProfile  Exception ==>  :: ' + ex.message);
        }
    },
    getIdentitySystemId: function(masterUserId) {
        var identityId = 0;
        gs.info(" getIdentitySystemId  :: begin");
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetIdentityId', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{"filterCriteria": [{"fieldName": "masterIdentityId","operator": "=","value": "' + masterUserId + '"}],"projectionList":["id"]}';
                var requestBody = requestBody1.toString();
                gs.info('getIdentitySystemId request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200 && updateResponseObj.success) {
                    gs.debug("Found identity Id");
                    identityId = updateResponseObj.data[0].id;
                } else {
                    gs.info("identity Id not found");
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('getIdentitySystemId   :: ' + message);
        }
        return identityId;
    },
    saveAuditLog: function(request_no, handler_name, notes, ae_request_number, ae_request_status) {
        var auditLog = new GlideRecordSecure('x_aleen_alertsnowp_audit_log');
        auditLog.request_no = request_no;
        auditLog.handler_name = handler_name;
        auditLog.notes = notes;
        auditLog.ae_request_number = ae_request_number;
        auditLog.ae_request_status = ae_request_status;
        auditLog.sys_created_on = new GlideDateTime();
        auditLog.sys_updated_on = new GlideDateTime();
        // auditLog.sys_created_by = handler_name;
        // auditLog.sys_updated_by = handler_name;
        auditLog.insert();
    },
    syncLocations: function() {
        gs.info('syncLocations  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.Get ALL Locations', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Authorization', this.jwt_token);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var gr = new GlideRecordSecure("x_aleen_alertsnowp_locations");
                    gr.query();
                    gr.deleteMultiple();
                    gs.info("Data sync is successful >>>>>>>>>>");
                    var responseObj = JSON.parse(updateresponseBody);
                    //gs.info(JSON.stringify(updateresponseBody));
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            this.saveLocation(responseObj.data[i].id.toString(), responseObj.data[i].text, "");
                        }
                    }
                } else {
                    gs.info("Data sync is unsuccessful  due to API error");
                }
            } else {
                gs.info("Data sync is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('resetPin   :: ' + message);
        }
    },
    saveLocation: function(id, name, location_type) {
        var location = new GlideRecordSecure('x_aleen_alertsnowp_locations');
        location.id = id;
        location.name = name;
        location.location_type = location_type;
        location.sys_created_on = new GlideDateTime();
        location.sys_updated_on = new GlideDateTime();
        location.insert();
    },
    type: 'AlertEnterprisePlatformAPIs'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-20 05:24:16</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>46e22a101b8fc5108dcc755e034bcb87</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_name>AlertEnterprisePlatformAPIs</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_46e22a101b8fc5108dcc755e034bcb87</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-29 12:25:46</sys_updated_on>
    </sys_script_include>
</record_update>
