<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertEnterprisePlatformAPIs</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Used to call from Workflow</description>
        <name>AlertEnterprisePlatformAPIs</name>
        <script><![CDATA[var accessTokenScriptScript = new AlertGetAccessToken();
var AlertEnterprisePlatformAPIs = Class.create();
AlertEnterprisePlatformAPIs.prototype = {
    initialize: function() {
        this.baseURLProp = gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl');
        this.jwt_token = "..";
        this.use_oauth = gs.getProperty('x_aleen_alertsnowp.use_oauth_authentication');
		gs.info("Is Oauth Enabled "+this.use_oauth + " "+ !this.use_oauth);
        if (!this.use_oauth) {
			gs.info("Oauth unavailable using jwt");
            this.jwt_token = accessTokenScriptScript.getToken();
        }
        this.date_format = gs.getProperty('x_aleen_alertsnowp.alert_api_payload_dateformat');
    },
    sendDataToFlow: function(msg) {
        gs.info("Request Msg from api >> " + msg);
        return msg;
    },
    buildingAccess: function(data) {
        gs.info("Include Script  buildingAccess  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUserXZ = new GlideRecordSecure('sys_user');
                var userNameBA = '';
                if (grUserXZ.get(data.request_for)) {
                    userNameBA = this.getIdentitySystemId(grUserXZ.user_name);
                }
                var access_end_date_str = "";
                var access_start_date_str = "";
                if (data.access_end_date && data.access_end_date != "") {
                    var gd = new GlideDate();
                    var gdt = new GlideDateTime(data.access_end_date);
                    gd.setValue(gdt.getValue());
                    access_end_date_str = gd.getByFormat(this.date_format);
                }
                if (data.access_start_date && data.access_start_date != "") {
                    var gdq = new GlideDate();
                    var gdtq = new GlideDateTime(data.access_start_date);
                    gdq.setValue(gdtq.getValue());
                    access_start_date_str = gdq.getByFormat(this.date_format);
                }
                var processedSysId = [];
                var accessLevelSourceIdList = [];
                var myArray = data.sourceid.split('###');
                gs.info("IncludeScript Building Access source id " + data.sourceid);
                for (var i = 0; i < myArray.length; i++) {
                    if (myArray[i] && myArray[i] != "") {
                        accessLevelSourceIdList.push(myArray[i]);
                    }
                }
                gs.info("IncludeScript Building Access length of access array " + myArray.length);
                var requestAccessList = [];
                var accessLevelId = "";
                for (var j = 0; j < accessLevelSourceIdList.length; j++) {
                    accessLevelId = accessLevelSourceIdList[j];
                    var access = {};
                    access.uiAction = "ADD";
                    access.identityId = userNameBA;
                    access.accessId = accessLevelId.toString();
                    if (access_start_date_str != "") {
                        access.validFrom = access_start_date_str;
                    }
                    if (access_end_date_str != "") {
                        access.validTo = access_end_date_str;
                    }
                    requestAccessList.push(access);
                }
                var form_notes = data.notes;
                var form_reason = data.reason;
                var customPropertiesObj = {
                    comment: form_notes.toString(),
                    reason: form_reason.toString()
                };
                var identityObj = {};
                identityObj.masterIdentityId = userNameBA.toString();
                var requestPayloadObject = {};
                requestPayloadObject.type = "Request_Building_Access_SNow_V1";
                requestPayloadObject.requestAccess = requestAccessList;
                requestPayloadObject.customProperties = customPropertiesObj;
                var reqPayload = new global.JSON().encode(requestPayloadObject);
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                gs.info('IncludeScript Building Access  NEW request body ::  ==> ' + reqPayload);
                r.setRequestBody(reqPayload);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Building  Access request (' + updateResponseObj.messages[0].valuesMap.id + ') has been placed with Alert ,it will take sometime to process ..');
                    this.saveAuditLogWithParent(data.number, gs.getUserName(), "Building access request is approved , request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted", data.parent_number);
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));

                } else {
                    gs.addErrorMessage("Error while processing the Building Access request , please contact administrator for the reasons/logs ");
                    this.saveAuditLogWithParent(data.number, gs.getUserName(), "Building Access role provisioning is failed  " + updateResponseObj.messages[0].messageDisplayText, "", "", data.parent_number);
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the Building Access request , please contact administrator for the reasons/logs ");
                gs.info("Building Access  Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLogWithParent(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "", data.parent_number);
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('buildingAccess   :: ' + message);
        }
    },
    newBadge: function(data) {
        gs.info(" newBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl'));
                r.setRequestHeader('Content-Type', 'application/json');

                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }

                var newBadgeRequestBody1 =
                    '{"type": "AddBadge_SNOW_V1","customFields": {"isBadgeAdminApprovalFlagEnabled": "No"},"requestIdentityFieldNew": [{ "identityId":' + identitySystemId + '}],"customProperties": { "comment":"' + data.delivery_comments + '","reason": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('newBadge request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('New Badge request(' + updateResponseObj.messages[0].valuesMap.id + ') has been placed with Alert ,it will take sometime to process..');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("New Badge Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  creation is failed in Alert " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("New Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('newBadge   :: ' + message);
            this.saveAuditLog(data.number, gs.getUserName(), "error occured while approving request ::" + message, "", "");
        }
    },
    assignNewBadgeBO: function(data, requestData, parentRequest) {
        gs.info(" assignNewBadgeBO  :: begin");
        try {
            if (null != this.jwt_token) {
                var identitySystemId = 0;
                identitySystemId = this.getIdentitySystemId(data.user.user_name);
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                var assetId = this.getAssetInformation(data.badge_id);
                r.setStringParameter('baseURL', this.baseURLProp);
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var newBadgeRequestBody1 =
                    '{"type": "AddBadge_SNOW_V1","customFields": {"isBadgeAdminApprovalFlagEnabled": "Yes"},"customProperties": {"businessJustification": "New Badge"},"requestAssets": [{"uiAction": "ADD","reason": "New Badge","sourceAssetStatus": "1", "identityId":' + identitySystemId + ',"assetId":' + assetId + ',"validFrom": "2023-11-21T05:59:38-0000","validTo": "2023-12-12T03:59:59-0000"}]}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('assignNewBadgeBO request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);

                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('New Badge request(' + updateResponseObj.messages[0].valuesMap.id + ') has been placed with Alert ,it will take sometime to process..');
                    this.saveAuditLog(requestData, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("New Badge Request is unsuccessful");
                    this.saveAuditLog(requestData, gs.getUserName(), "request is approved , New badge request  creation is failed in Alert " + updateResponseObj.messages[0].messageDisplayText, "", "");
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("New Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('activateBadgeBO   :: ' + message);
        }
    },
    activateBadge: function(data) {
        gs.info(" activateBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                //var assetId = this.getAssetInformation(data.badge_number);
                var assetId = data.badge_id;
                r.setStringParameter('baseURL', this.baseURLProp);
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "ActivateBadge_SNow_V1", "requestAssets": [{ "identityId":' + identitySystemId + ' ,"assetId": ' + assetId + ',"uiAction":"UNLOCK","sourceAssetStatus": "ASSIGNED"}]}';
                var requestBody = requestBody1.toString();
                gs.info('activateBadge  request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Badge activation request (' + updateResponseObj.messages[0].valuesMap.id + ') placed with Alert, it will take sometime to process ..');
                    this.saveAuditLog(data.number, gs.getUserName(), "activateBadge  request has been placed with Alert", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Badge activation isunsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "activateBadge is unsuccessful reason ->" + updateResponseObj.data.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Activate Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('activateBadge   :: ' + message);
        }
    },
    activateBadgeBO: function(data, requestData, parentRequest) {
        gs.info(" activateBadgeBO  :: begin");
        gs.info(" activateBadgeBO  :: data.user_name     === >   " + data.user_name);
        try {
            if (null != this.jwt_token) {
                var identitySystemId = 0;
                identitySystemId = this.getIdentitySystemId(data.user_name);
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                var assetId = data.asset_id;
                r.setStringParameter('baseURL', this.baseURLProp);
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "ActivateBadge_SNow_V1", "requestAssets": [{ "identityId":' + identitySystemId + ' ,"assetId": ' + assetId + ',"uiAction":"UNLOCK","sourceAssetStatus": "ASSIGNED"}]}';
                var requestBody = requestBody1.toString();
                gs.info('activateBadgeBO  request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200) {
                    gs.info(" activateBadgeBO  :: SUCCESS");
                    return true;
                } else {
                    gs.info(" activateBadgeBO  :: ERROR");
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('activateBadgeBO   :: ' + message);
        }
        return false;
    },
    deactivateBadgeBO: function(data) {
        gs.info(" deactivateBadgeBO  :: begin");
        try {
            if (null != this.jwt_token) {
                var identitySystemId = 0;
                identitySystemId = this.getIdentitySystemId(data.user_name);
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                var assetId = data.asset_id;
                r.setStringParameter('baseURL', this.baseURLProp);
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "DeactivateBadge_SNow_V1","requestAssets": [{"uiAction": "LOCK", "identityId":' + identitySystemId + ' ,"assetId": ' + assetId + '}]}';
                var requestBody = requestBody1.toString();
                gs.info('activateBadgeBO  request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200) {
                    gs.info(" deactivateBadgeBO  :: SUCCESS");
                    return true;
                } else {
                    gs.info(" deactivateBadgeBO  :: ERROR");
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('activateBadgeBO   :: ' + message);
        }
        return false;
    },
    registerVisitor: function(data) {
        this.saveAuditLog(data.number, gs.getUserName(), "Visitor visit request created successfully", "", "");
        gs.addInfoMessage('Request (' + data.number + ') has been placed Successfully , it will take a while a process. it will update request status');
    },
    addVisitor: function(data) {
        gs.info(" addVisitor  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var userName = '';
                if (grUser.get(data.request_for)) {
                    userName = grUser.user_name;
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateVisitor', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateVisitor");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "Visitor","firstName": "' + data.first_name + '", "lastName": "' + data.last_name + '","email": "' + data.email + '","visitorCompany":"' + data.visitor_company + '"}';
                var requestBody = requestBody1.toString();
                gs.info('addVisitor JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    this.saveAuditLog(data.number, gs.getUserName(), "Visitor add/update is successful , going to save visit", "", "");
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        var visitorId = responseObj.data[0].id;
                        this.addVisit(data, visitorId);
                        return this.sendDataToFlow(JSON.stringify(responseObj.messages));
                    }
                } else {
                    gs.info("Error while processing the request , please contact administrator for the reasons/logs ");
                    this.saveAuditLog(data.number, gs.getUserName(), "Visitor add/update is unsuccessful", "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            gs.info('Visitor visit Exception ==>  :: ' + ex.message);
            data.state = 4;
            data.update();
        }
    },
    addVisit: function(data, visitorId) {
        gs.info(" addVisit  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var hostidentitySystemId = 0;
                if (grUser.get(data.host_user)) {
                    hostidentitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var gd = new GlideDate();
                var gdt = new GlideDateTime(data.visit_end_date);
                gd.setValue(gdt.getValue());
                visit_end_date_str = gd.getByFormat(this.date_format);
                gd = new GlideDate();
                gdt = new GlideDateTime(data.visit_start_date);
                gd.setValue(gdt.getValue());
                visit_start_date_str = gd.getByFormat(this.date_format);
                var randomVisitId = gd.getByFormat("yyyyMMddHHmmssSS");
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateVisit', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateVisit");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "Visit_Registration","visitTypeCode": "single","recurringTypeId": 1,"visitStartDate": "' + visit_start_date_str + '","visitEndDate": "' + visit_end_date_str + '", "locationId":' + data.visit_location + ' ,"id": "' + randomVisitId + '","visitorsVisits": [{"visitId": "' + randomVisitId + '","visitorId": ' + visitorId + ',"visitStatus": 60}],"visitHosts": [{"hostId": ' + hostidentitySystemId + ',"visitId": "' + randomVisitId + '"}]}';
                var requestBody = requestBody1.toString();
                gs.info('addVisit JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    this.saveAuditLog(data.number, gs.getUserName(), "Visit addded is successfully ", "", "");
                    data.state = 3;
                    data.update();
                } else {
                    gs.info("Error while processing the request , please contact administrator for the reasons/logs ");
                    this.saveAuditLog(data.number, gs.getUserName(), "Visit add/update is unsuccessful", "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            gs.info(' visit Exception ==>  :: ' + ex.message);
            data.state = 4;
            data.update();
        }
    },

    mobileCredentials: function(data) {
        gs.info(" mobileCredentials  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var newBadgeRequestBody1 =
                    '{"type": "RequestNewMobileCredetials","requestIdentityFieldNew": [{"identityId": ' + identitySystemId + ',"customProperties": {"phoneNumber": "' + data.phone_number + '"}}],"customProperties": {"comment": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('mobileCredentials request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Mobile Credentials request has been placed with Alert ,it will take sometime to Process, it will update the status based on Alert response');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Mobile Credentials request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("Mobile Credentials Request is created Successfully");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Mobile Credentials Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Mobile Credentials request  creation is failed in Alert  " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Mobile Credentials Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('mobileCredentials   :: ' + message);
        }
    },
    replaceBadge: function(data) {
        gs.info(" replaceBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identitySystemId = 0;
                if (grUser.get(data.request_for)) {
                    identitySystemId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var newBadgeRequestBody1 =
                    '{"type": "RequestReplacementBadge_SNOW_V1","customFields": {"isBadgeAdminApprovalFlagEnabled": "No"},"requestAssets": [{"uiAction": "REPLACE", "sourceAssetStatus": "1", "identityId":' + identitySystemId + ',"reason": "' + data.reason + '","replaceAssetId": ' + data.badge_id + '}],"customProperties": { "businessJustification":"' + data.badge_delivery_comments + '","reason": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('replace Badge request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                gs.info(" reset PIN  request status ===> " + newBadgehttpStatus);
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Replace Badge request (' + updateResponseObj.messages[0].valuesMap.id + ') has been placed with Alert ,it will take sometime to process...');
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("Replace Badge Request is created Successfully");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Replace Badge Request is unsuccessful");
                    this.saveAuditLog(data.number, gs.getUserName(), "request is approved , Replace Badge request  creation is failed in Alert  " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Replace Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('replaceBadge   :: ' + message);
        }
    },
    replaceBadgeBO: function(data, requestData, parentRequest) {
        gs.info(" replaceBadgeBO  :: begin");
        try {
            if (null != this.jwt_token) {
                var identitySystemId = 0;
                identitySystemId = this.getIdentitySystemId(data.user.user_name);
                var assetId = this.getAssetInformation(data.badge_id);
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var newBadgeRequestBody1 =
                    '{"type": "RequestReplacementBadge_SNOW_V1","customFields": {"isBadgeAdminApprovalFlagEnabled": "Yes"},"requestAssets": [{"uiAction": "REPLACE", "sourceAssetStatus": "1", "identityId":' + identitySystemId + ',"reason": "' + data.reason + '","replaceAssetId": ' + data.replacement_badge_id + ',"assetId":' + assetId + ' }],"customProperties": { "businessJustification":"' + data.comments + '","reason": "' + data.reason + '"}}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('replace Badge BO request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
                updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
                    gs.addInfoMessage('Replace Badge request (' + updateResponseObj.messages[0].valuesMap.id + ') has been placed with Alert ,it will take sometime to process...');
                    this.saveAuditLog(requestData, gs.getUserName(), "request is approved , New badge request  is created in Alert successfully", updateResponseObj.messages[0].valuesMap.id, "submitted");
                    gs.info("Replace Badge Request is created Successfully");
                    return this.sendDataToFlow(JSON.stringify(updateResponseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    gs.info("Replace Badge Request is unsuccessful");
                    this.saveAuditLog(requestData, gs.getUserName(), "request is approved , Replace Badge request  creation is failed in Alert  " + updateResponseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                    data.update();
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Replace Badge Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(requestData, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
                data.update();
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('replaceBadge BO   :: ' + message);
        }
    },
    resetPin: function(data) {
        gs.info(" resetPin  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var identityId = '';
                if (grUser.get(data.request_for)) {
                    identityId = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "ResetPIN_SNOW_V1", "requestAssets":[{"uiAction": "UPDATE", "identityId":"' + identityId + '","readerPin":' + data.new_pin + ',"assetId":' + data.badge_id + ' }]}';
                var requestBody = requestBody1.toString();
                gs.info('reset pin JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var response = r.executeAsync();
                var responseBody = response.getBody();
                var responsehttpStatus = response.getStatusCode();
                responseObj = JSON.parse(responseBody);
                if (responsehttpStatus == 200 && responseObj.success) {
                    gs.addInfoMessage('Reset PIN request (' + responseObj.messages[0].valuesMap.id + ') has been placed with Alert, will be processed shortly ...');
                    this.saveAuditLog(data.number, identityId, "Reset PIN  is successful", responseObj.messages[0].valuesMap.id, "submitted");
                    return this.sendDataToFlow(JSON.stringify(responseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    this.saveAuditLog(data.number, identityId, "Reset PIN  is unsuccessful reason : ==> " + responseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Reset PIN Request is unsuccessful due to API  server authentication / connectivity issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('resetPin   :: ' + message);
        }
    },
    updateProfile: function(data) {
        gs.info(" updateProfile  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
                var userName = '';
                if (grUser.get(data.request_for)) {
                    userName = this.getIdentitySystemId(grUser.user_name);
                }
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                gs.info("use oauth " + gs.getProperty('x_aleen_alertsnowp.use_oauth_authentication'));
                if (this.use_oauth) {
                    new OauthHelper().validateToken("CreateAlertRequest");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"type": "Update_Profile_info_SNow_V1", "requestIdentityFieldNew":[{ "email":"' + data.email + '", "identityId":' + userName + ',"phone":"' + data.phone_number + '"}]}';
                var requestBody = requestBody1.toString();
                gs.info('updateProfile JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var response = r.executeAsync();
                var responseBody = response.getBody();
                var responsehttpStatus = response.getStatusCode();
                gs.info("http code " + responsehttpStatus);
                responseObj = JSON.parse(responseBody);
                gs.info(responseBody);
                gs.info("responsehttpStatus   ::" + responsehttpStatus);
                if (responsehttpStatus == 200 && responseObj.success) {
                    gs.addInfoMessage('Update profile request(' + responseObj.messages[0].valuesMap.id + ') has been placed with Alert Successfully , will be processed shortly');
                    this.saveAuditLog(data.number, userName, "profile request is successful", responseObj.messages[0].valuesMap.id, "submitted");
                    return this.sendDataToFlow(JSON.stringify(responseObj.messages));
                } else {
                    gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                    this.saveAuditLog(data.number, userName, "profile update is unsuccessful  reason ==> " + responseObj.messages[0].messageDisplayText, "", "");
                    data.state = 4;
                }
            } else {
                gs.addErrorMessage("Error while processing the request , please contact administrator for the reasons/logs ");
                gs.info("Update profile Request is unsuccessful due to API  server authentication issue");
                this.saveAuditLog(data.number, gs.getUserName(), "Alert server API Authentication / connection issue ", "", "");
                data.state = 4;
            }
        } catch (ex) {
            gs.info('updateProfile  Exception ==>  :: ' + ex.message);
        }
    },
    getIdentitySystemId: function(masterUserId) {
        var identityId = 0;
        gs.info(" getIdentitySystemId  :: begin");
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetIdentityId', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("GetIdentityId");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"filterCriteria": [{"fieldName": "masterIdentityId","operator": "=","value": "' + masterUserId + '"}],"projectionList":["id"]}';
                var requestBody = requestBody1.toString();
                gs.info('getIdentitySystemId request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200 && updateResponseObj.success) {
                    gs.info("Found identity Id");
                    identityId = updateResponseObj.data[0].id;
                } else {
                    gs.info("identity Id not found");
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('getIdentitySystemId   :: ' + message);
        }
        return identityId;
    },
    saveAlertRequest: function(alert_request_no, snow_request_number, status) {
        var alertRequest = new GlideRecordSecure('x_aleen_alertsnowp_alert_request_status');
        alertRequest.alert_request_no = alert_request_no;
        alertRequest.snow_request_number = snow_request_number;
        alertRequest.status = status;
        alertRequest.sys_created_on = new GlideDateTime();
        alertRequest.sys_updated_on = new GlideDateTime();
        alertRequest.insert();
    },
    saveAuditLog: function(request_no, handler_name, notes, ae_request_number, ae_request_status) {
        var auditLog = new GlideRecordSecure('x_aleen_alertsnowp_audit_log');
        auditLog.request_no = request_no;
        auditLog.handler_name = handler_name;
        auditLog.notes = notes;
        auditLog.ae_request_number = ae_request_number;
        auditLog.ae_request_status = ae_request_status;
        auditLog.sys_created_on = new GlideDateTime();
        auditLog.sys_updated_on = new GlideDateTime();
        auditLog.insert();
    },
    saveAuditLogWithParent: function(request_no, handler_name, notes, ae_request_number, ae_request_status, parent) {
        var auditLog = new GlideRecordSecure('x_aleen_alertsnowp_audit_log');
        auditLog.request_no = request_no;
        auditLog.handler_name = handler_name;
        auditLog.notes = notes;
        auditLog.ae_request_number = ae_request_number;
        auditLog.ae_request_status = ae_request_status;
        auditLog.parent = parent;
        auditLog.sys_created_on = new GlideDateTime();
        auditLog.sys_updated_on = new GlideDateTime();
        auditLog.insert();
    },
    searchExisting: function(recordId, array) {
        for (var i = 0; i < array.length; i++) {
            if (array[i] == recordId) {
                return true;
            }
        }
        return false;
    },
    syncUserBadges: function(req_for) {
        gs.info('syncUserBadges  :: Begin');
        try {
            var grSysUser = new GlideRecordSecure('sys_user');
            username = "";
            if (grSysUser.get(req_for)) {
                username = grSysUser.getValue('user_name');
                var grUserBadges = new GlideRecordSecure("x_aleen_alertsnowp_userbadges");
                grUserBadges.addQuery('user', grSysUser.getValue('sys_id'));
                grUserBadges.query();
                grUserBadges.deleteMultiple();
            }
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UserBadgesAndAccessLevels', 'POST');
                r.setStringParameterNoEscape('baseURL', this.baseURLProp);
                r.setStringParameterNoEscape('userId', username);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("UserBadgesAndAccessLevels");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        if (responseObj.data[0].identityAssets && responseObj.data[0].identityAssets.length > 0) {
                            var assets = responseObj.data[0].identityAssets;
                            for (i = 0; i < assets.length; i++) {
                                var assetObj = assets[i];
                                this.saveUserBadge(assetObj, req_for.sys_id, username);
                            }
                            gs.info("syncUserBadges (" + responseObj.data[0].identityAssets.length + ")  successful ");
                        }
                        return true;
                    } else {
                        gs.addInfoMessage("No badges for   --> " + username);
                    }
                } else {
                    gs.info("syncUserBadges is unsuccessful  due to API error");
                }
            } else {
                gs.info("syncUserBadges  is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncUserBadges   :: ' + message);
        }
        return false;
    },
    rejectRequest: function(parentRequest) {
        gs.info('rejectRequest    ::  Begin ' + parentRequest);
        try {
            if (null != parentRequest && "" != parentRequest && parentRequest.startsWith("NEW_BADGE_")) {
                var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_new_badge');
                recordToInsert.addQuery('number', parentRequest);
                recordToInsert.query();
                while (recordToInsert.next()) {
                    recordToInsert.state = 4;
                    recordToInsert.update();
                    this.saveAuditLog(parentRequest, gs.getUserName(), "Request is rejected by  " + gs.getUserName(), "", "");
                }
            }

        } catch (ex) {
            var message = ex.message;
            gs.info(" ##########################         " + message);
        }
    },
    saveUserBadge: function(template, user_id, user_name) {
        try {
            var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_userbadges');
            recordToInsert.user = user_id;
            recordToInsert.user_name = user_name;
            recordToInsert.asset_id = template.asset.id;
            recordToInsert.badge_id = template.asset.text;
            recordToInsert.badge_status = template.intStatus;
            recordToInsert.badgetype = template.asset.assetType.text;
            recordToInsert.badge_number = template.asset.serialNo;
            recordToInsert.provisioning_status = "YES";
            var validFrom = new GlideDateTime();
            validFrom.setDisplayValue(template.validFrom);
            var validTo = new GlideDateTime();
            validTo.setDisplayValue(template.validTo);
            recordToInsert.badge_valid_from = validFrom;
            recordToInsert.badge_valid_to = validTo;
            recordToInsert.sys_created_on = new GlideDateTime();
            recordToInsert.sys_updated_on = new GlideDateTime();
            recordToInsert.insert();
        } catch (ex) {
            var message = ex.message;
            gs.info(" ########## SAVE  USER BADGE  ################         " + message);
        }
    },
    getAssetInformation: function(serialNo) {
        gs.info('getAssetInformation  :: Begin');
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetAssetInfo', 'POST');
                r.setStringParameterNoEscape('baseURL', this.baseURLProp);
                r.setStringParameterNoEscape('serialNo', serialNo);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("GetAssetInfo");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    var responseObj = JSON.parse(updateresponseBody);
                    if (null != responseObj && responseObj.success && null != responseObj.data && responseObj.data.length > 0) {
                        var assetdata = responseObj.data[0];
                        return assetdata.id;
                    } else {
                        gs.addInfoMessage("No asset with serial number   --> " + serialNo);
                    }
                } else {
                    gs.info("getAssetInformation is unsuccessful  due to API error");
                }
            } else {
                gs.info("getAssetInformation  is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('getAssetInformation   :: ' + message);
        }
        return 0;
    },
    updateAlertRequest: function(alert_request_no, status) {
        gs.info('updateAlertRequest    ::  Begin ');
        try {
            if (null != alert_request_no && "" != alert_request_no) {
                var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_alert_request_status');
                recordToInsert.addQuery('alert_request_number', alert_request_no);
                recordToInsert.query();
                while (recordToInsert.next()) {
                    recordToInsert.alert_request_status = status;
                    recordToInsert.update();
                    this.saveAuditLog(recordToInsert.snow_request_number, "System", "Request is updated in Alert ", alert_request_no, "status");
                }
            }

        } catch (ex) {
            var message = ex.message;
            gs.info(" ##########################         " + message);
        }
    },
    syncAlertRequestStatus: function() {
        gs.info('syncAlertRequestStatus    ::  Begin ');
        try {
            var recordToInsert = new GlideRecordSecure('x_aleen_alertsnowp_alert_request_status');
            recordToInsert.addQuery('alert_request_status', 'open');
            recordToInsert.query();
            var alert_request_numbers = "";
            if (recordToInsert.hasNext()) {
                while (recordToInsert.next()) {
                    if (alert_request_numbers == "") {
                        alert_request_numbers = '"' + recordToInsert.alert_request_number + '"';
                    } else {
                        alert_request_numbers = alert_request_numbers + ',"' + recordToInsert.alert_request_number + '"';
                    }
                }
                gs.info("syncAlertRequestStatus ::--- " + alert_request_numbers);
                gs.info('syncAlertRequestStatus    ::  check alert request status with request numbers ');
                if (null != this.jwt_token) {
                    var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.AlertRequestStatus', 'POST');
                    r.setStringParameter('baseURL', this.baseURLProp);
                    r.setRequestHeader('Content-Type', 'application/json');
                    if (this.use_oauth) {
                        new OauthHelper().validateToken("AlertRequestStatus");
                        r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                    } else {
                        r.setRequestHeader('Authorization', this.jwt_token);
                    }
                    var requestBody1 =
                        '{"filterCriteria": [{"fieldName": "extId","operator": "in","valueList": [' + alert_request_numbers + ']}],"projectionList":["extId","type","intStatus","workflowObjCatStatus"]}';
                    var requestBody = requestBody1.toString();
                    gs.info('syncAlertRequestStatus request body ::  ==> ' + requestBody);
                    r.setRequestBody(requestBody);
                    var updateresponse = r.executeAsync();
                    var updateresponseBody = updateresponse.getBody();
                    var updatehttpStatus = updateresponse.getStatusCode();
                    var responseObj = JSON.parse(updateresponseBody);
                    if (updatehttpStatus == 200 && responseObj.success) {
                        gs.info("Found Request Status ");
                        for (i = 0; i < responseObj.data.length; i++) {
                            var requestObj = responseObj.data[i];
                            this.updateAlertRequest(requestObj.extId, requestObj.workflowObjCatStatus);
                        }
                    } else {
                        gs.info("syncAlertRequestStatus:: Request Status not found");
                    }
                } else {
                    gs.info("syncAlertRequestStatus  is unsuccessful due to API  server authentication / connectivity issue");
                }
            } else {
                gs.info("syncAlertRequestStatus:: No request found with open status");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncAlertRequestStatus   :: ' + message);
        }
    },
    syncAlertRequestStatusByRequestNumber: function(alert_request_numbers) {
        gs.info('syncAlertRequestStatusByRequestNumber    ::  Begin ');
        try {
            var alert_request_numbersObj = '"' + alert_request_numbers + '"';
            gs.info("syncAlertRequestStatusByRequestNumber ::--- " + alert_request_numbersObj);
            gs.info('syncAlertRequestStatusByRequestNumber    ::  check alert request status with request numbers ');
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.AlertRequestStatus', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                if (this.use_oauth) {
                    new OauthHelper().validateToken("AlertRequestStatus");
                    r.setAuthenticationProfile('oauth2', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
                } else {
                    r.setRequestHeader('Authorization', this.jwt_token);
                }
                var requestBody1 =
                    '{"filterCriteria": [{"fieldName": "extId","operator": "in","valueList": [' + alert_request_numbersObj + ']}],"projectionList":["extId","type","intStatus","workflowObjCatStatus"]}';
                var requestBody = requestBody1.toString();
                gs.info('syncAlertRequestStatusByRequestNumber request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                var responseObj = JSON.parse(updateresponseBody);
                gs.info("responseObj --" + JSON.stringify(responseObj));
                if (updatehttpStatus == 200 && responseObj.success) {
                    gs.info("Found Request Status " + responseObj.data);
                    if (responseObj.data) {
                        for (i = 0; i < responseObj.data.length; i++) {
                            var requestObj = responseObj.data[i];
                            gs.info("requestObj " + JSON.stringify(requestObj));
                            if (requestObj.workflowObjCatStatus != undefined) {
                                gs.info("requestObj.workflowObjCatStatus ::--- " + requestObj.workflowObjCatStatus);
                                this.updateAlertRequest(requestObj.extId, requestObj.workflowObjCatStatus);
                                return this.sendDataToFlow(JSON.stringify(requestObj.workflowObjCatStatus));
                            } else if (requestObj.intStatus != undefined) {
                                gs.info("requestObj.intStatus ::--- " + requestObj.intStatus == 0 ? 'Active' : '');
                                this.updateAlertRequest(requestObj.extId, requestObj.intStatus == 0 ? 'Active' : '');
                                gs.info("sendDataToFlow ::--- " + JSON.stringify(requestObj.intStatus == 0 ? 'Active' : ''));
                                return this.sendDataToFlow(JSON.stringify(requestObj.intStatus == 0 ? 'Active' : ''));
                            }
                        }
                    } else {
                        return this.sendDataToFlow("Request Status not found");
                    }

                } else {
                    return this.sendDataToFlow(JSON.stringify(responseObj.messages));
                }
            } else {
                gs.info("syncAlertRequestStatusByRequestNumber  is unsuccessful due to API  server authentication / connectivity issue");
            }
        } catch (ex) {
            var message = ex.message;
            gs.info('syncAlertRequestStatusByRequestNumber error   :: ' + message);
        }
    },
    type: 'AlertEnterprisePlatformAPIs'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-20 05:24:16</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>46e22a101b8fc5108dcc755e034bcb87</sys_id>
        <sys_mod_count>401</sys_mod_count>
        <sys_name>AlertEnterprisePlatformAPIs</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_46e22a101b8fc5108dcc755e034bcb87</sys_update_name>
        <sys_updated_by>anurag.yadav</sys_updated_by>
        <sys_updated_on>2024-03-21 05:36:00</sys_updated_on>
    </sys_script_include>
</record_update>
