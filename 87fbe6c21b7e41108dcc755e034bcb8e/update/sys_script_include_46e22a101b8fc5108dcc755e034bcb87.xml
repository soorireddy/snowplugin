<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.AlertEnterprisePlatformAPIs</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Used to call from Workflow</description>
        <name>AlertEnterprisePlatformAPIs</name>
        <script><![CDATA[var AlertEnterprisePlatformAPIs = Class.create();
AlertEnterprisePlatformAPIs.prototype = {
    initialize: function() {
        this.baseURLProp = gs.getProperty('x_aleen_alertsnowp.alert_api_baseUrl');
        //gs.info(" Base URL is " + this.baseURLProp);
        this.jwt_token = this.getJWT();
    },
    getJWT: function() {
        try {
            var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetJWTToken', 'POST');
            r.setStringParameter('baseURL', this.baseURLProp);
            r.setRequestHeader('Content-Type', 'application/json');
            var requestBody1 =
                '{ "username":"' + gs.getProperty('x_aleen_alertsnowp.alert_api_username') +
                '", "password":"' + gs.getProperty('x_aleen_alertsnowp.alert_api_password') + '"}';
            var requestBody = requestBody1.toString();
            //gs.info('JWT request body ::  ==> ' + requestBody);
            r.setRequestBody(requestBody);
            var response = r.executeAsync();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            //gs.info('Authentication httpStatus  ::' + httpStatus);
            var Token = null;
            if (httpStatus == 200) {
                var responseObj = JSON.parse(responseBody);
                if (null != responseObj && responseObj.success && null != responseObj.data) {
                    Token = 'Bearer ' + responseObj.data.access_token;
                    // gs.info('Authentication is Successful');
                }
            } else {
                // gs.info('Authentication is unSuccessful');
            }
            // gs.debug(Token);
            return Token;
        } catch (ex) {
            var message = ex.message;
            gs.debug('getJWT   :: ' + message);
        }
    },
    newBadge: function(data) {
        gs.info(" newBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
				var identitySystemId = 0;
                if(grUser.get(data.request_for)){
					identitySystemId = this.getIdentitySystemId(grUser.user_name);
				}
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.CreateAlertRequest', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var newBadgeRequestBody1 =
                    '{"type": "RequestNewBadge","requestIdentityIds": [' + identitySystemId + ']}';
                var newBadgerequestBody = newBadgeRequestBody1.toString();
                gs.info('newBadge request body ::  ==> ' + newBadgerequestBody);
                r.setRequestBody(newBadgerequestBody);
                var newBadgeResponse = r.executeAsync();
                var newBadgeResponseBody = newBadgeResponse.getBody();
                var newBadgehttpStatus = newBadgeResponse.getStatusCode();
				updateResponseObj = JSON.parse(newBadgeResponseBody);
                if (newBadgehttpStatus == 200 && updateResponseObj.success) {
					this.saveAuditLog(data.number,gs.getUserName(),"request is approved , New badge request  is created in Alert successfully",updateResponseObj.messages[0].valuesMap.id,"submitted") ;
                    gs.info("New Badge Request is created Successfully");
                } else {
                    gs.info("New Badge Request is unsuccessful");
					this.saveAuditLog(data.number,gs.getUserName(),"request is approved , New badge request  creation is failed in Alert ","","") ;
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('newBadge   :: ' + message);
			this.saveAuditLog(data.number,gs.getUserName(),"error occured while approving request ::" +message ,"","") ;
        }
    },
    activateBadge: function(data) {
        gs.info(" activateBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.info(" activateBadge  ==> Token is not Null");
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('activateBadge   :: ' + message);
        }
    },
    registerVisitor: function(data) {
        gs.info(" registerVisitor  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.info(" registerVisitor  ==> Token is not Null");
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('registerVisitor   :: ' + message);
        }
    },
    buildingAccess: function(data) {
        gs.info(" buildingAccess  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.info(" buildingAccess  ==> Token is not Null");
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('buildingAccess   :: ' + message);
        }
    },
    mobileCredentials: function(data) {
        gs.info(" mobileCredentials  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.info(" mobileCredentials  ==> Token is not Null");
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('mobileCredentials   :: ' + message);
        }
    },
    replaceBadge: function(data) {
        gs.info(" replaceBadge  :: begin");
        try {
            if (null != this.jwt_token) {
                gs.info(" replaceBadge  ==> Token is not Null");
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('replaceBadge   :: ' + message);
        }
    },
    resetPin: function(data) {
        gs.info(" resetPin  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
				var identityId = '';
                if(grUser.get(data.request_for)){
					identityId = grUser.user_name;
				}
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UpdateProfile', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{ "identity":{ "masterIdentityId":"' + identityId + '","pin":' + data.new_pin + '}}';
                var requestBody = requestBody1.toString();
                gs.info('reset pin JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    this.saveAuditLog(data.number,identityId,"Reset PIN  is successful","","") ;
                    data.state = 3;
                } else {
                    this.saveAuditLog(data.number,identityId,"Reset PIN  is unsuccessful","","") ;
                    data.state = 4;
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('resetPin   :: ' + message);
        }
    },
    updateProfile: function(data) {
        gs.info(" updateProfile  :: begin");
        try {
            if (null != this.jwt_token) {
                var grUser = new GlideRecordSecure('sys_user');
				var userName = '';
                if(grUser.get(data.request_for)){
					userName = grUser.user_name;
				}
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.UpdateProfile', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{ "identity":{ "email":"' + data.email + '", "masterIdentityId":"' + userName + '","phone":' + data.phone_number + '}}';
                var requestBody = requestBody1.toString();
                gs.debug('updateProfile JWT request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                if (updatehttpStatus == 200) {
                    gs.debug("Updated Successfully");
                    data.state = 3;
					this.saveAuditLog(data.number,userName,"profile update is successful","","") ;
                } else {
                    gs.debug("Update is unsuccessful");
					this.saveAuditLog(data.number,userName,"profile update is unsuccessful","","") ;
                    data.state = 4;
                }
            }
        } catch (ex) {
            gs.debug('updateProfile  Exception ==>  :: ' + ex.message);
        }
    },
    getIdentitySystemId: function(masterUserId) {
        var identityId = 0;
        gs.info(" getIdentitySystemId  :: begin");
        try {
            if (null != this.jwt_token) {
                var r = new sn_ws.RESTMessageV2('x_aleen_alertsnowp.GetIdentityId', 'POST');
                r.setStringParameter('baseURL', this.baseURLProp);
                r.setRequestHeader('Content-Type', 'application/json');
                r.setRequestHeader('Authorization', this.jwt_token);
                var requestBody1 =
                    '{"filterCriteria": [{"fieldName": "masterIdentityId","operator": "=","value": "' + masterUserId + '"}],"projectionList":["id"]}';
                var requestBody = requestBody1.toString();
                gs.info('getIdentitySystemId request body ::  ==> ' + requestBody);
                r.setRequestBody(requestBody);
                var updateresponse = r.executeAsync();
                var updateresponseBody = updateresponse.getBody();
                var updatehttpStatus = updateresponse.getStatusCode();
                updateResponseObj = JSON.parse(updateresponseBody);
                if (updatehttpStatus == 200 && updateResponseObj.success) {
                    gs.debug("Found identity Id");
                    identityId = updateResponseObj.data[0].id;
                } else {
                    gs.debug("identity Id not found");
                }
            }
        } catch (ex) {
            var message = ex.message;
            gs.debug('getIdentitySystemId   :: ' + message);
        }
        return identityId;
    },
	saveAuditLog: function(request_no,handler_name,notes,ae_request_number,ae_request_status) {
		var auditLog = new GlideRecordSecure('x_aleen_alertsnowp_audit_log');
        auditLog.request_no = request_no;
        auditLog.handler_name = handler_name;
        auditLog.notes = notes;
        auditLog.ae_request_number = ae_request_number;
		auditLog.ae_request_status =ae_request_status;
        auditLog.sys_created_on = new GlideDateTime();
		auditLog.sys_updated_on = new GlideDateTime();
		// auditLog.sys_created_by = handler_name;
		// auditLog.sys_updated_by = handler_name;
        auditLog.insert();
	},
    type: 'AlertEnterprisePlatformAPIs'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-20 05:24:16</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>46e22a101b8fc5108dcc755e034bcb87</sys_id>
        <sys_mod_count>63</sys_mod_count>
        <sys_name>AlertEnterprisePlatformAPIs</sys_name>
        <sys_package display_value="Badge &amp; Building Access" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Badge &amp; Building Access">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_46e22a101b8fc5108dcc755e034bcb87</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-25 11:29:14</sys_updated_on>
    </sys_script_include>
</record_update>
