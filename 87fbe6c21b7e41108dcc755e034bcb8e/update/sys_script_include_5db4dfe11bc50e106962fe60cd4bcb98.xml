<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_aleen_alertsnowp.OauthHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>OauthHelper</description>
        <name>OauthHelper</name>
        <script><![CDATA[var OauthHelper = Class.create();
OauthHelper.prototype = {
    initialize: function() {

    },
    validateToken: function(restmessage) {
        var requestor_id = "";
        var found_access_token = false;
        var found_refresh_token = false;
        var restMessageGr = new GlideRecordSecure('sys_rest_message');
        restMessageGr.addQuery('name', restmessage);
        restMessageGr.query();
        if (restMessageGr.next()) {
            requestor_id = restMessageGr.sys_id;
        }
        if (requestor_id != null && requestor_id != "") {
            var oauthGr = new GlideRecordSecure('oauth_credential');
            oauthGr.addQuery('oauth_requestor_profile.requestor_id', requestor_id);
            oauthGr.query();
            while (oauthGr.next()) {
                if (oauthGr.type == 'access_token') {
                    found_access_token = false;
                }
                if (oauthGr.type == 'refresh_token') {
                    found_refresh_token = true;
                }
            }
        }
        if (!found_access_token && found_refresh_token) {
            //TODO :  get new access token using refresh token without getting new refresh token
        }
        if (!found_refresh_token) {
            var tokenRequest = new sn_auth.GlideOAuthClientRequest();
            tokenRequest.setParameter('oauth_requestor_context', "sys_rest_message");
            tokenRequest.setParameter('oauth_requestor', requestor_id);
            tokenRequest.setParameter('personal', null);
            tokenRequest.setParameter('oauth_provider_profile', gs.getProperty('x_aleen_alertsnowp.oauth_profile'));
            tokenRequest.setParameter('oauth_provider_id', null);
            var oAuthClient = new sn_auth.GlideOAuthClient();
            oAuthClient.requestTokenByRequest(null, tokenRequest);
        }

    },

    type: 'OauthHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-03-20 04:57:44</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>5db4dfe11bc50e106962fe60cd4bcb98</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>OauthHelper</sys_name>
        <sys_package display_value="Workplace Access and Security" source="x_aleen_alertsnowp">87fbe6c21b7e41108dcc755e034bcb8e</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Workplace Access and Security">87fbe6c21b7e41108dcc755e034bcb8e</sys_scope>
        <sys_update_name>sys_script_include_5db4dfe11bc50e106962fe60cd4bcb98</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-03-20 05:34:45</sys_updated_on>
    </sys_script_include>
</record_update>
